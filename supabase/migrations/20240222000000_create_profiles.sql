-- Create custom types for permissions and roles
create type app_permission as enum (
  'forums.create',
  'forums.moderate',
  'forums.delete',
  'posts.create',
  'posts.moderate',
  'posts.delete',
  'comments.create',
  'comments.moderate',
  'comments.delete',
  'chat.create',
  'chat.moderate',
  'chat.delete',
  'blog.create',
  'blog.publish',
  'blog.moderate',
  'blog.delete',
  'blog.draft',
  'blog.comment',
  'ai.customize',
  'ai.train',
  'ai.share_templates',
  'ai.advanced_features',
  'ai.analytics'
);

create type app_role as enum (
  'user',
  'moderator',
  'admin',
  'author',
  'editor'
);

-- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  username text unique,
  full_name text,
  avatar_url text,
  website text,
  email text unique not null,
  bio text,
  role app_role default 'user',
  reputation integer default 0,
  last_seen_at timestamp with time zone,
  author_bio text,
  featured_author boolean default false,
  display_name text,
  pronouns text,
  timezone text,
  locale text default 'en',
  location text,
  occupation text,
  interests text[],
  expertise text[],
  mood_status text,
  availability_status text,
  preferences jsonb default '{"theme": {"mode": "dark"}, "notifications": {"email": true}}'::jsonb,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  last_sign_in timestamp with time zone,
  constraint username_length check (char_length(username) >= 3)
);

-- Create user roles table for RBAC
create table user_roles (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete cascade not null,
  role app_role not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique (user_id, role)
);

-- Create role permissions table
create table role_permissions (
  id bigint generated by default as identity primary key,
  role app_role not null,
  permission app_permission not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique (role, permission)
);

-- Set up Row Level Security (RLS)
alter table profiles enable row level security;
alter table user_roles enable row level security;
alter table role_permissions enable row level security;

-- Policies for profiles
create policy "Public profiles are viewable by everyone."
  on profiles for select
  using (true);

create policy "Users can insert their own profile."
  on profiles for insert 
  with check (auth.uid() = id);

create policy "Users can update own profile."
  on profiles for update
  using (auth.uid() = id)
  with check (auth.uid() = id);

-- Policies for user_roles
create policy "User roles are viewable by everyone."
  on user_roles for select
  using (true);

create policy "Only admins can manage user roles."
  on user_roles for all
  using (
    exists (
      select 1 from user_roles
      where user_id = auth.uid()
      and role = 'admin'
    )
  );

-- Policies for role_permissions
create policy "Role permissions are viewable by everyone."
  on role_permissions for select
  using (true);

create policy "Only admins can manage role permissions."
  on role_permissions for all
  using (
    exists (
      select 1 from user_roles
      where user_id = auth.uid()
      and role = 'admin'
    )
  );

-- Insert default role permissions
insert into role_permissions (role, permission) values
  -- Admin permissions
  ('admin', 'forums.create'),
  ('admin', 'forums.moderate'),
  ('admin', 'forums.delete'),
  ('admin', 'posts.create'),
  ('admin', 'posts.moderate'),
  ('admin', 'posts.delete'),
  ('admin', 'comments.create'),
  ('admin', 'comments.moderate'),
  ('admin', 'comments.delete'),
  ('admin', 'chat.create'),
  ('admin', 'chat.moderate'),
  ('admin', 'chat.delete'),
  ('admin', 'blog.create'),
  ('admin', 'blog.publish'),
  ('admin', 'blog.moderate'),
  ('admin', 'blog.delete'),
  ('admin', 'blog.draft'),
  ('admin', 'blog.comment'),
  ('admin', 'ai.customize'),
  ('admin', 'ai.train'),
  ('admin', 'ai.share_templates'),
  ('admin', 'ai.advanced_features'),
  ('admin', 'ai.analytics'),
  -- Editor permissions
  ('editor', 'blog.moderate'),
  ('editor', 'blog.publish'),
  ('editor', 'blog.draft'),
  ('editor', 'blog.comment'),
  ('editor', 'ai.customize'),
  ('editor', 'ai.train'),
  ('editor', 'ai.share_templates'),
  -- Author permissions
  ('author', 'blog.create'),
  ('author', 'blog.draft'),
  ('author', 'blog.publish'),
  ('author', 'blog.comment'),
  ('author', 'ai.customize'),
  ('author', 'ai.train'),
  -- Moderator permissions
  ('moderator', 'forums.moderate'),
  ('moderator', 'posts.moderate'),
  ('moderator', 'comments.moderate'),
  ('moderator', 'chat.moderate'),
  ('moderator', 'ai.customize'),
  -- User permissions
  ('user', 'posts.create'),
  ('user', 'comments.create'),
  ('user', 'chat.create'),
  ('user', 'blog.comment'),
  ('user', 'ai.customize');

-- Update the handle_new_user function to be more resilient
create or replace function handle_new_user()
returns trigger
security definer set search_path = ''
language plpgsql
as $$
declare
  default_avatar text := 'default-avatar.png';
begin
  insert into public.profiles (
    id,
    email,
    username,
    avatar_url,
    full_name,
    created_at,
    updated_at
  ) values (
    new.id,
    new.email,
    coalesce(
      new.raw_user_meta_data->>'username',
      'user_' || substr(new.id::text, 1, 8)
    ),
    coalesce(
      new.raw_user_meta_data->>'avatar_url',
      'https://api.dicebear.com/7.x/pixel-art/svg?seed=' || new.id::text
    ),
    coalesce(
      new.raw_user_meta_data->>'full_name',
      new.email::text
    ),
    now(),
    now()
  );
  
  -- Insert default user role
  insert into public.user_roles (user_id, role)
  values (new.id, 'user');
  
  return new;
exception
  when others then
    -- Log error details to a logging table if needed
    return new;
end;
$$;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure handle_new_user();

-- Create trigger to update timestamps
create function handle_updated_at()
returns trigger
security definer
language plpgsql
as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$;

create trigger on_profile_updated
  before update on profiles
  for each row execute procedure handle_updated_at(); 